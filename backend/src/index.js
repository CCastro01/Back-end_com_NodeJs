const express = require("express")
const {uuid} = require("uuidv4") //importando a fun√ß√£o uuid de dentro da biblioteca uuidv4
const app = express()

app.use(express.json()) //fazendo com que o express consiga interpretar um JSON



//M√âTODOS HTTP
// 
//GET: Buscar informa√ß√µes do back-end
//POST: Criar uma informa√ß√£o no back-end
//PUT: Alterar uma informa√ß√£o no back-end
//DELETE: Deletar uma informa√ß√£o no back-end 

 
/**
 * TIPOS DE PAR√ÇMETROS
 * 
 * Query Params: Principalmente para filtros e pagina√ß√£o
 * Route Params: Identificar recursos (Atualizar ou deletar)
 * Request Body: Conte√∫do na hora de criar ou editar um recurso (JSON)
 */





   const projects = []

app.get('/projects', (request, response) => {

   const {nome} = request.query 

   const results = nome 
    ? projects.filter(project => project.nome.includes(nome))
    : projects;


   return response.json(results)
})








app.post('/projects', (request, response) => {

   // // Forma comum:
   // const body = request.body
   // console.log(body)

   // // Utilizando desestrura√ß√£o:
   // const {nome} = request.body
   // const {curso} = request.body
   // console.log(nome)
   // console.log(curso)

   const { nome, curso } = request.body

   const project = { id: uuid(), nome, curso } //utilizando a biblioteca uuidv4 para cria√ß√£o de id

   projects.push(project)

   return response.json(project)

})









app.put('/projects/:id', (request, response) => {

   const { id } = request.params
   const { nome, curso } = request.body //conte√∫do que eu posso alterar


   const projectIndex = projects.findIndex(project => project.id === id)
   //percorrendo o array projects procurando por um project cujo o id seja igual 
   //ao id que est√° sendo passado por par√¢metro na rota 
   //O findIndex vai retornar a posi√ß√£o do projeto dentro do array

   if(projectIndex < 0){
      return response.status(400).json({
         error: "Project not found."
      })
   }

   const project = {
      id,
      nome,
      curso
   }

   projects[projectIndex] = project 

   return response.json(project)

})



 





app.delete('/projects/:id', (request, response) => {

   const {id} = request.params

   const projectIndex = projects.findIndex(project => project.id === id)
   //percorrendo o array projects procurando por um project cujo o id seja igual 
   //ao id que est√° sendo passado por par√¢metro na rota 
   //O findIndex vai retornar a posi√ß√£o do projeto dentro do array

   if(projectIndex < 0){
      return response.status(400).json({
         error: "Project not found."
      })
   }

   projects.splice(projectIndex, 1)
   // usando o m√©todo splice para retirar um dado do array a partir do seu √≠ndice
   // no caso, aqui est√° sendo retirado o √≠ndice que foi atribu√≠do a const projectIndex
   // esse 1 como segundo par√¢metro, quer dizer que apenas uma posi√ß√£o dever√£ ser removida


   return response.status(204).send()
})






app.listen(3333, ()=>{
   console.log("üöÄ Back-end started!")
})